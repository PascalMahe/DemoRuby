require 'psych' #see why at http://www.opinionatedprogrammer.com/2011/04/parsing-yaml-1-1-with-ruby/
require 'yaml'
require 'open-uri'
require './common.rb'
require './SimpleHtmllogger.rb'
require './prediction.rb'

###########################################################################################
#################################                        ##################################
#################################    MAIN SCRIPT HERE    ##################################
#################################                        ##################################
###########################################################################################


begin #general exception catching block

	start_time = Time.now
	
	# Initializing logger
	$logger = SimpleHtmlLogger::new('./', SimpleHtmlLogger::Debug)
	
	$logger.info("Loading config")
	
	$config = load_config()
	$is_test = true
	
	$logger.info("START TIME: " + start_time.strftime($config[:gen][:default_date_time_format]))
	
	loading_end_time = Time.now

	# Creating job 
	current_job = Job::new
	current_job.start_time = start_time
	current_job.loading_end_time = loading_end_time

	$logger.info("Starting to crawl")

	# Load images location file
	filename = "images_locations.txt"
	if File.exist?(filename) then
		# loop on lines
		File.open(filename, 'r') do |file|
			$logger.info("File opened")
			file.each_line do |image_url|
				image_url.chomp!
				$logger.info("Line : #{image_url}")
				# Getting image's filename
				index_last_slash = image_url.rindex('/')
				$logger.debug("index_last_slash : #{index_last_slash}")
				
				filename_length = image_url.length - index_last_slash
				$logger.debug("filename_length : #{filename_length}")
				image_filename = image_url.slice(index_last_slash + 1, filename_length)
				
				$logger.debug("File : #{image_filename}")
				# Fetching and saving image (see http://stackoverflow.com/a/6780888/2112089)
				path = './Test-HTML/fichiers_commun/' + image_filename
				begin
					File.open(path, 'wb') do |fo|
						fo.write(open(image_url).read)
					end
				rescue Exception => err
					$logger.error(err.inspect)
					$logger.error(err.backtrace)
				end
			end
			
			file.close
			$logger.info("File closed")
		end
	end
	
	$logger.info("Ending crawl")
	current_job.crawling_end_time = Time.now
	current_job.computing_end_time = Time.now
	
	$logger.debug(current_job)
	$logger.imp("END REAL STUFF")
	
	
rescue Exception => err
	$logger.error(err.inspect)
	$logger.error(err.backtrace)
end

$logger.end_log


